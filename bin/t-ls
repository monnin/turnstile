#!/usr/bin/python3

import argparse
import datetime
import os
import stat
import sys

sys.path.append(os.path.dirname(__file__) + "/../lib")

import usbUDP
import usbUSB1
import usb_comm

def timestamp_to_str(ts):
    dt = datetime.datetime.fromtimestamp(ts)

    return dt.strftime("%d-%b-%y %H:%M")

def print_longview(my_client, fullpath, filename = None):
    if filename is None:
        filename = fullpath

    data = my_client.client_stat_path(fullpath)

    if data is None:
        print("?",filename)

    else:
        (flags, mode, size, mtime, ctime) = data
        if flags & 0x80:
            code = "l"
        elif flags & 0x01:
            code = "d"
        else:
            code = "-"

        extra = ""

        # If this is a symlink - show the path
        if flags & 0x80:
            dest = my_client.client_get_symlink(fullpath)
            extra = " -> " + dest

        print("{0}{1:>4} {2:>9} {3} {4}{5}".format(
               code, stat.filemode(mode)[1:], size,
               timestamp_to_str(mtime),
               filename, extra))

def parse_args():
    parser = argparse.ArgumentParser(
                description="Turnstile Remote Directory Listing")

    #
    #   Common turnstile options
    #

    parser.add_argument("-d", "--debug", help="Level of debug info shown",
           type=int, default=0)

    parser.add_argument("-P", "--priority",
           help="Base priority of requests (for relay only)",
           type=int)

    parser.add_argument("-t", "--timeout",
           help="time (in seconds) to wait for USB response",
           default=5, type=float)

    parser.add_argument("-u", "--use-usb",
           action="store_true",
           help="Use the USB port directly instead of the relay")

    parser.add_argument("--product-id", type=int, default=0xca7e,
           help=argparse.SUPPRESS)

    parser.add_argument("--vendor-id", type=int, default=0xca7e,
           help=argparse.SUPPRESS)

    parser.add_argument("--max-trans-size", type=int, default=-1,
           help=argparse.SUPPRESS)

    parser.add_argument("-p", "--port",
           help="UDP port of the relay (def=12345)",
           type=int, default=12345)

    parser.add_argument("-i","--ip-addr",
           help="IP address of the relay (def=localhost)",
           default="localhost")

    #
    #   Program specific options
    #

    parser.add_argument("-l", "--long",
           action="store_true",
           help="Set the mode and mtime of local file to match the remote file")

    parser.add_argument("remotepath",
           help="Directory (or file) on remote computer")

    args = parser.parse_args()

    return args

def main():
    args = parse_args()

    long_format = args.long

    if args.use_usb:
        my_usb_obj = usbUSB1.usbUSB1(
                            vendor_id=args.vendor_id,
                            product_id=args.product_id)

    else:
        my_usb_obj = usbUDP.usbUDP()

        if args.port is not None:
            my_usb_obj.set_port(args.port)

        if args.ip_addr is not None:
            my_usb_obj.set_ip(args.ip_addr)

    my_client = usb_comm.Client(my_usb_obj, args.timeout)
    my_client.set_debug(args.debug)

    # Use the command-line to override max-trans-size if given
    if args.max_trans_size >= 64:
        my_client.client_set_max_packet(args.max_trans_size)

    if args.priority is not None:
        my_client.client_set_priority(args.priority)

    directory = args.remotepath

    files = my_client.client_ls(directory)

    if files is None:
        print(directory + ": remote file not found", file=sys.stderr)

    elif isinstance(files, str):
        one_file = files

        if long_format:
            print_longview(my_client, one_file)
        else:
            print(one_file)

    else:
        files.sort()

        for one_item in files:
            one_item = one_item

            if long_format:
                print_longview(my_client, directory + "/" + one_item, one_item)
            else:
                print(one_item)

main()
